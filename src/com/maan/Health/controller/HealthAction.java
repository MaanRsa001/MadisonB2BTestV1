/*
 * Created for Health Insurance
 * Generated by Sathish on 2May2013
 */
package com.maan.Health.controller;
import java.util.Calendar;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.apache.struts2.ServletActionContext;

import proj.date.DateFunction;
import com.maan.common.LogManager;
import com.maan.common.Validation;
import com.maan.services.util.ValidationFormat;
import com.maan.Health.Services.HealthService;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;
import com.opensymphony.xwork2.util.ArrayUtils;
import com.opensymphony.xwork2.util.LocalizedTextUtil;

public class HealthAction extends ActionSupport implements ModelDriven<HealthBean>{
	private HealthBean healthBean=new HealthBean(); 
	HttpServletRequest request=ServletActionContext.getRequest();
	HttpServletResponse response=ServletActionContext.getResponse();
	Map<String, Object> session=ActionContext.getContext().getSession();
	HealthService service=new HealthService();
	Validation validation=new Validation();
	private static final long serialVersionUID = 1L;
	private static final String DROPDOWN = "dropdown";
	private static final String FIELD = "ELEMENT_NAME";
	private String brokerOne=getText("BROKER_ONE");
	private String branchCode=(String)session.get("LoginBranchCode");
	private String productId=(String) session.get("product_id");
	private String brokerCode=(String) session.get("brokerCode");
	private String loginId=(String)session.get("user");
	private String issuer=(String)session.get("RSAISSUER");
	private String userType=(String)session.get("usertype");
	private String user=(String)session.get("user1");
	private String selection;
	private String endTypeId;
	private String fields;
	private int count;
	private List<Object> trList=null;
	private List<Object> trPolicyList=null;
	
	public List<Object> getTrPolicyList() {
		return trPolicyList;
	}

	public void setTrPolicyList(List<Object> trPolicyList) {
		this.trPolicyList = trPolicyList;
	}

	public List<Object> getTrList() {
		return trList;
	}

	public void setTrList(List<Object> trList) {
		this.trList = trList;
	}

	public int getCount() {
		return count;
	}

	public void setCount(int count) {
		this.count = count;
	}

	public String getSelection() {
		return selection;
	}

	public void setSelection(String selection) {
		this.selection = selection;
	}
	public String getEndTypeId() {
		return endTypeId;
	}

	public void setEndTypeId(String endTypeId) {
		this.endTypeId = endTypeId;
	}
	public String getFields() {
		if(StringUtils.isNotEmpty(endTypeId)){
			String[] ids=endTypeId.split(",");
			if(ArrayUtils.isNotEmpty(ids)){
				fields=getText("endt")+",";
				for (int i = 0; i < ids.length; i++) {
					fields+=getText("endt"+ids[i])+",";
				}
				fields=fields.substring(0, fields.lastIndexOf(","));
			}
		}
		return fields;
	}
	
	private Map<String, String> genderList;
	public Map<String, String> getGenderList() {
		genderList = new LinkedHashMap<String, String>();
		genderList.put("M", "Male");
		genderList.put("F", "Female");
		return genderList;
	}

	public Object[] getParams()
	{
	Object[] objects=new String[]{healthBean.getOption(),productId,branchCode,"","",healthBean.getSchemeCover(),healthBean.getOriginCountry(),
			healthBean.getDestCountry(),"",healthBean.getTravelCover(),"",loginId,brokerCode};
		return objects;
	}
	
	public List<Object> getTitleList()
	{
		return new com.maan.common.dao.CommonDAO().getOptionsList("title", productId, getParams());
	}
	
	public List<Object> getNationalityList()
	{																			 
		return new com.maan.common.dao.CommonDAO().getOptionsList("nationality", productId, getParams());
	}
	public List<Object> getRelationList()
	{
		return new com.maan.common.dao.CommonDAO().getOptionsList("relation", productId, getParams());
	}
	public List<Object> getCityList()
	{
		return new com.maan.common.dao.CommonDAO().getOptionsList("city", productId, getParams());
	}
	public List<Object> getSchemeCoverList()
	{
		return new com.maan.common.dao.CommonDAO().getOptionsList("schemecover", productId, getParams());
	}
	public String getCoverInfo() {
		healthBean.setCover(service.getCoverInfo(healthBean.getProductId(),healthBean.getSchemeCover(), healthBean.getTravelCover(),healthBean.getBranchCode()));
		return "coverSelection";
	}
	public String cancelReissue() {
		return "cancelReissue";
	}
	public String getCancelReissue() {
		healthBean.setDisplay(service.getCancelReissue(healthBean));
		return 	"cancelReissue";
	}
	public List<Object> getCoverPeriodMap()
	{
		return new com.maan.common.dao.CommonDAO().getOptionsList("coverPeriod", productId, getParams());
	}

	public String getCustomer()
	{
		healthBean.setDisplay("getCustomer");
		return INPUT;
	}
	public String init()
	{
		healthBean.setDisplay("getQuote");
		service.getSecondPageDts(healthBean);
		return INPUT;
	}
	public String showQuote()
	{
		service.getBackShowQuote(healthBean);
		healthBean.setDisplay("showQuote");
		return INPUT;
	}
	public String travelCover(){
		request.setAttribute(FIELD, "travelCover");
		return DROPDOWN;
	}
	public String coverageList(){
		request.setAttribute(FIELD, "coverages");
		return DROPDOWN;
	}
	public String view() {
 		if("profile".equalsIgnoreCase(selection)){
			trList=service.getDetailsView(healthBean);
			trPolicyList=service.getPolicyView(healthBean);
			
		}
		else if("viewSave".equalsIgnoreCase(selection))
		{
			getValidate("viewSave");
			if(getActionErrors().isEmpty()){
				try{
					service.updateCorrections(healthBean);
					selection="updateSuccess";
				}
				catch(Exception e){
					LogManager.info("view()==>"+e);
				}
			}
			else{
				service.getSecondPageDts(healthBean);
			}
		}
		else{
			count=service.getEffectiveDate(healthBean);
			if(count>0){
				service.getSecondPageDts(healthBean);
				trList=service.getDetailsView(healthBean);
				trPolicyList=service.getPolicyView(healthBean);
			}
		}
		return "viewCustomer";
	}
	public String getQuote()
	{
		getValidate(healthBean.getActionType());
		if(getActionErrors().isEmpty())
		{
			healthBean.setCover(service.getCoverInfo(healthBean.getProductId(),healthBean.getSchemeCover(), healthBean.getTravelCover(),healthBean.getBranchCode()));
			String result=service.getUpdateInsurerInfo(healthBean);
			if("SUCCESS".equalsIgnoreCase(result)){
				if(!"getSave".equalsIgnoreCase(healthBean.getActionType())){
					result=service.getPremium(healthBean);
					if("SUCCESS".equalsIgnoreCase(result))
						if("getQuote".equalsIgnoreCase(healthBean.getActionType())){
							service.getBackShowQuote(healthBean);
							if(StringUtils.isNotBlank(healthBean.getReferralMsg())&&!"admin".equalsIgnoreCase(healthBean.getUser())){
								session.put("QuoteNo",healthBean.getQuoteNo());
								request.setAttribute("reqFrom","Referral");
								try{
										new com.maan.Home.MasterController.HomeMailController().processResult(request,response);
								}catch(Exception e)
								{
									LogManager.debug(e);
								}
								session.remove("QuoteNo");
								return "policyInfo";
							}else
							{
								healthBean.setDisplay("showQuote");
							}
						}
						else
							healthBean.setDisplay("getQuote");
					else
						addActionError(getText("error.health.premium"));	
				}else
				{
					healthBean.setDisplay("showQuoteInfo");
				}
			}
			else
				addActionError(getText("error.health.update"));
		}
		return INPUT;
	}
	public List<Object> getPolicyInformation() {
		return service.getPolicyInformation(healthBean.getQuoteNo());
	}
	public String getGeratePolicy()
	{
		String forward=INPUT;
		String result="";
		getValidate("getPolicy");
		if(getActionErrors().isEmpty())
		{
			if("admin".equals(healthBean.getUser())){
				//Admin Referral accepting
				result=service.getAdminReferralUpdation(healthBean);
				if("SUCCESS".equalsIgnoreCase(result)){
					session.put("QuoteNo",healthBean.getQuoteNo());
					request.setAttribute("reqFrom",healthBean.getUser());
					request.setAttribute("quote_status",healthBean.getReferralMsg());
					request.setAttribute("adminReferalRemarks",healthBean.getAdminRemarks());
					try{
							new com.maan.Home.MasterController.HomeMailController().processResult(request,response);
					}catch(Exception e)
					{
						LogManager.debug(e);
					}
					session.remove("QuoteNo");
					healthBean.setDisplay("showRefInfo");
				}else
					addActionError(getText("error.health.update"));	
			}else
			{
				result=service.getGeratePolicy(healthBean);
				if("SUCCESS".equalsIgnoreCase(result)){
					if(!"getSave".equalsIgnoreCase(healthBean.getActionType())){
						try{
							if("Y".equalsIgnoreCase(healthBean.getReferralYN())){
								session.put("QuoteNo",healthBean.getQuoteNo());
								request.setAttribute("reqFrom","Referral");
								try{
										new com.maan.Home.MasterController.HomeMailController().processResult(request,response);
								}catch(Exception e)
								{
									LogManager.debug(e);
								}
								session.remove("QuoteNo");
							}
							if("Y".equalsIgnoreCase(healthBean.getQuoteEmailYN()))
							{
								session.put("QuoteNo",healthBean.getQuoteNo());
								request.setAttribute("reqFrom","Customer");
								try{
									new com.maan.Home.MasterController.HomeMailController().processResult(request,response);
								}catch(Exception e)
								{
									LogManager.debug(e);
								}
								session.remove("QuoteNo");
							}
							if("Y".equalsIgnoreCase(healthBean.getPolicyEmailYN())){
								session.put("QuoteNo",healthBean.getQuoteNo());
								request.setAttribute("Option","All");
								request.setAttribute("reqFrom","Schedule");
								new com.maan.Health.Pdf.HealthPDFCreator().processResult(request,response);
								new com.maan.Home.MasterController.HomeMailController().processResult(request,response);
								session.remove("QuoteNo");
							}
						}catch(Exception e)
						{
							LogManager.debug(e);
						}
						forward="policyInfo";
					}
					else
					{
						healthBean.setDisplay("showQuoteInfo");
					}
				}						
				else
					addActionError(getText("error.health.update"));
			}
		}else
		{
			healthBean.setCover(service.getCoverInfo(healthBean.getProductId(),healthBean.getSchemeCover(), healthBean.getTravelCover(),healthBean.getBranchCode()));
		}
		return forward;
	}
	public void getValidate(String type)
	{
		try{
		 if("getQuote".equalsIgnoreCase(type)||"getPremium".equalsIgnoreCase(type)||"getSave".equalsIgnoreCase(type) || "viewSave".equalsIgnoreCase(type)){
			if(StringUtils.isEmpty(healthBean.getCustomerId()) && !"viewSave".equalsIgnoreCase(selection))
			{
				addActionError(getText("error.health.curtomer.valid"));
			}else
			{
              	ValidationFormat val = new ValidationFormat();
                //Title VALIDATION
              	if(StringUtils.isBlank(healthBean.getTitle())&&!"getSave".equalsIgnoreCase(type))
				{
					addActionError(getText("error.health.title"));
				} 
              	
                //NAME VALIDATION
                if(StringUtils.isNotBlank(healthBean.getInsurerName()))
                {
                	if(!val.validateStringWithSpace(healthBean.getInsurerName())){
                		addActionError(getText("error.health.Name.valid"));
                	}
                }
                else if(!"getSave".equalsIgnoreCase(type)){
                       addActionError(getText("error.health.Name"));
                }
              //CusCivilId VALIDATION
                if(StringUtils.isNotBlank(healthBean.getCusCivilId()))
                {
                	if(!StringUtils.isNumeric(healthBean.getCusCivilId()))
    				{
    					addActionError(getText("error.health.cusCivilId.valid"));
    				}else if(healthBean.getCusCivilId().length()!=10)
    				{
    					addActionError(getText("error.health.cusCivilId.digitValid"));
    				}
                	
                } else if(!"getSave".equalsIgnoreCase(type)){
                	addActionError(getText("error.health.cusCivilId"));
                }
              	
                //DATE OF BIRTH VALIDATION
                int age=-1;
                if(StringUtils.isNotBlank(healthBean.getDob()))
                {
		        	if(!val.IsDateValidationFormat(healthBean.getDob())){
		        		addActionError(getText("error.health.dob.valid"));
		        	}else if(!val.sysDateValidation(healthBean.getDob()))
					{
		        		addActionError(getText("error.health.dob.validDate"));
					}else
		        	{
		        		age=new com.maan.common.dao.CommonDAO().getCalculatedAge(healthBean.getDob());
		        	}
                }
	        	else if(!"getSave".equalsIgnoreCase(type))
	        		addActionError(getText("error.health.dob"));
                
              //GENDER VALIDATION
			   if(StringUtils.isBlank(healthBean.getGender())&&!"getSave".equalsIgnoreCase(type))
			   {
				    addActionError(getText("error.health.gender"));
			   }
			   
			   //MARITAL STATUS VALIDATION
			   if(StringUtils.isBlank(healthBean.getMaritalStatus())&&!"getSave".equalsIgnoreCase(type))
			   {
				    addActionError(getText("error.health.maritalStatus"));
			   }
			   //OCCUPATION VALIDATION
			   if(StringUtils.isBlank(healthBean.getOccupation())&&!"getSave".equalsIgnoreCase(type))
			   {
				    addActionError(getText("error.health.occupation"));
			   }
			   //RELATION VALIDATION
			   if(StringUtils.isBlank(healthBean.getRelation())&&!"getSave".equalsIgnoreCase(type))
			   {
				    addActionError(getText("error.health.relation"));
			   }else
			   {
				   if(!"Child".equals(healthBean.getRelation()))
					{
					   if(age<=18&&age!=-1)
	                		 addActionError(getText("error.health.ageGr18Yers"));
                   }
			   }
			   //NATIONALITY VALIDATION
			   if(StringUtils.isBlank(healthBean.getNationality())&&!"getSave".equalsIgnoreCase(type))
			   {
				    addActionError(getText("error.health.nationality"));
			   }
			   
			   //SPONSOR ID VALIDATION
			   if(StringUtils.isBlank(healthBean.getSponsorId())&&!"getSave".equalsIgnoreCase(type))
			   {
				    addActionError(getText("error.health.sponsorId"));
			   }
			   
			   //SPONSOR NAME VALIDATION
               if(StringUtils.isNotBlank(healthBean.getSponsorName()))
               {
               	if(!val.validateStringWithSpace(healthBean.getSponsorName())){
               		addActionError(getText("error.health.sponsorName.valid"));
               	}
               }
               else if(!"getSave".equalsIgnoreCase(type)){
                      addActionError(getText("error.health.sponsorName"));
               }
			   
               //SPONSOR CITY VALIDATION
			   if(StringUtils.isBlank(healthBean.getSponsorCity())&&!"getSave".equalsIgnoreCase(type))
			   {
				    addActionError(getText("error.health.sponsorCity"));
			   }
			 //SPONSOR MOBILE NUMBER
               if(StringUtils.isNotBlank(healthBean.getSponsorMobileNo()))
               {
               	if(!StringUtils.isNumeric(healthBean.getSponsorMobileNo()))
   				{
   					addActionError(getText("error.health.mobileNo.valid"));
   				}else if(healthBean.getSponsorMobileNo().length()!=10)
   				{
   					addActionError(getText("error.health.mobileNo.digitValid"));
   				}
               	
               } else if(!"getSave".equalsIgnoreCase(type)){
               		addActionError(getText("error.health.mobileNo"));
               }
                
              	if(!"getSave".equalsIgnoreCase(type)&&!"viewSave".equalsIgnoreCase(type)){
			          //Schme Cover
						if(StringUtils.isEmpty(healthBean.getSchemeCover()))
						{
							addActionError(getText("error.health.schemeCover"));
						}
				        //EXPIRY DATE VALIDATION (INCLUDES COVER PERIOD AND EFFECTIVE DATE)
						boolean effDate=true;
				        if(StringUtils.isEmpty(healthBean.getCoverPeriod()))
						{
				        	addActionError(getText("error.health.coverPeriod.valid"));
				        	effDate=false;
						}
				        if(StringUtils.isEmpty(healthBean.getInceptionDt())){
				        	addActionError(getText("error.health.effectiveDt.valid"));
				        	effDate=false;
				        }else if(val.sysDateValidation(healthBean.getInceptionDt()))
				        {
				        	addActionError(getText("error.health.expiryDt.less.currentDt"));
				        	effDate=false;
				        }
				        if(StringUtils.isEmpty(healthBean.getExpiryDt())){
				        	addActionError(getText("error.health.expiryDt.valid"));
				        	effDate=false;
				        }
				        if(effDate)
				        {
				              final DateFunction datf = new DateFunction();
				              final Calendar cal1 = Calendar.getInstance();
				              String[] effDT=healthBean.getInceptionDt().split("/");
				              cal1.set(Integer.parseInt(effDT[2]),Integer.parseInt(effDT[1]),Integer.parseInt(effDT[0]));
				              final Calendar cal2 = Calendar.getInstance();
				              final Map todayDate =  new com.maan.common.dao.CommonDAO().getTodaysDate();
				              cal2.set(Integer.parseInt(todayDate.get("YEAR").toString()),Integer.parseInt(todayDate.get("MONTH").toString()),Integer.parseInt(todayDate.get("DAY").toString()));
				              long diff = 0;
				              try{
				                  diff = datf.getDayDifference(cal1,cal2);
				              }
				              catch(Exception e){
				                   LogManager.debug(e);
				              }
							  int backDates=0;
							  String backDate="";
				              if(diff > 0)
							  {
				            	  	backDate = new com.maan.common.dao.CommonDAO().getBackDatesAllowed((String)healthBean.getLoginId(),(String)healthBean.getUserType(),healthBean.getProductId(),healthBean.getBranchCode(),"");
				                    if(backDate!=null&&!"".equals(backDate)){
										backDates = Integer.parseInt(backDate);
									}
									if(backDates==0){
										addActionError(getText("error.health.expiryDt.less.currentDt"));
									}
									else if(diff > backDates)	{
										addActionError((LocalizedTextUtil.findDefaultText("error.health.backDt.valid", Locale.ENGLISH, new Object[]{(backDates)+""})));
									}
				              }
				             }
					}
		  }
		}else if("getPolicy".equalsIgnoreCase(type)){
			if("admin".equals(healthBean.getUser())&&healthBean.getTotalPremium()<0){
				addActionError(getText("error.health.totalPremiumPayable"));
			}
		}
		 
		}catch(Exception e)
		{
			LogManager.debug(e);
		}
	}

	public HealthBean getModel() {
		// TODO Auto-generated method stub
		healthBean.setLoginId(loginId);
		healthBean.setIssuer(issuer);
		healthBean.setBranchCode(branchCode);
		healthBean.setProductId(productId);
		healthBean.setDestCountry("134");
		healthBean.setOriginCountry("134");
		healthBean.setUserType(userType);
		healthBean.setUser(user);
		return healthBean;
	}
}
